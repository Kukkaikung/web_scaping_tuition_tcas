import pandas as pd
from dash import Dash, html, dcc, dash_table, Input, Output
import plotly.express as px

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
df = pd.read_csv("filtered_tcas_cleaned.csv")

# ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢
uni_options = [{'label': uni, 'value': uni} for uni in sorted(df['‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢'].unique())]

# ‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤
min_price = int(df['‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢'].min())
max_price = int(df['‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢'].max())
price_marks = {i: f'{i}' for i in range(min_price, max_price+1, max(1000, (max_price-min_price)//10))}

# ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏≤‡∏£‡∏≤‡∏á
table_columns = [
    {"name": "‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢", "id": "‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢"},
    {"name": "‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£", "id": "‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£"},
    {"name": "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢ (‡∏ö‡∏≤‡∏ó/‡πÄ‡∏ó‡∏≠‡∏°)", "id": "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢"},
]

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ Dash
app = Dash(__name__)
app.title = "Dashboard ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£ TCAS"

# Layout
app.layout = html.Div([
    html.H1("üìö Dashboard ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£ TCAS", style={'textAlign': 'center'}),

    html.Div([
        html.Label("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢:", style={'fontWeight': 'bold'}),
        dcc.Dropdown(
            id='uni-dropdown',
            options=uni_options,
            multi=True,
            placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)"
        )
    ], style={'width': '50%', 'margin': 'auto'}),

    html.Br(),

    html.Div([
        html.Label("‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏° (‡∏ö‡∏≤‡∏ó/‡πÄ‡∏ó‡∏≠‡∏°):", style={'fontWeight': 'bold'}),
        dcc.RangeSlider(
            id='price-slider',
            min=min_price,
            max=max_price,
            step=500,
            marks=price_marks,
            value=[min_price, max_price],
            tooltip={"placement": "bottom", "always_visible": True}
        )
    ], style={'width': '80%', 'margin': 'auto'}),

    html.Br(),

    html.Div([
        html.Label("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Å‡∏£‡∏≤‡∏ü (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£):", style={'fontWeight': 'bold'}),
        dcc.Dropdown(
            id='course-dropdown',
            multi=True,
            placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£...",
            options=[],  # ‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô callback
            maxHeight=300
        )
    ], style={'width': '80%', 'margin': 'auto'}),

    html.Br(),

    html.H2("‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£", style={'textAlign': 'center'}),
    dash_table.DataTable(
        id='course-table',
        columns=table_columns,
        data=df.to_dict('records'),
        page_size=10,
        style_table={'overflowX': 'auto'},
        style_cell={'textAlign': 'left', 'padding': '5px'},
        style_header={'fontWeight': 'bold', 'backgroundColor': '#f0f0f0'},
        style_data_conditional=[
            {'if': {'row_index': 'odd'}, 'backgroundColor': '#f9f9f9'}
        ]
    ),

    html.Br(),

    html.H2("‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£", style={'textAlign': 'center'}),
    dcc.Graph(id='bar-chart'),

    html.H2("Box Plot: ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢", style={'textAlign': 'center'}),
    dcc.Graph(id='box-plot'),

    html.H2("Pie Chart: ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢", style={'textAlign': 'center'}),
    dcc.Graph(id='pie-chart'),
])

# Callback: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÉ‡∏ô Dropdown
@app.callback(
    Output('course-dropdown', 'options'),
    Output('course-dropdown', 'value'),
    Input('uni-dropdown', 'value'),
    Input('price-slider', 'value')
)
def update_course_dropdown(selected_unis, price_range):
    filtered_df = df.copy()
    if selected_unis and len(selected_unis) > 0:
        filtered_df = filtered_df[filtered_df['‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢'].isin(selected_unis)]
    filtered_df = filtered_df[
        (filtered_df['‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢'] >= price_range[0]) &
        (filtered_df['‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢'] <= price_range[1])
    ]
    course_options = [{'label': c, 'value': c} for c in sorted(filtered_df['‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£'].unique())]
    return course_options, [c['value'] for c in course_options[:5]]

# Callback ‡∏´‡∏•‡∏±‡∏Å: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≤‡∏ü
@app.callback(
    Output('course-table', 'data'),
    Output('bar-chart', 'figure'),
    Output('box-plot', 'figure'),
    Output('pie-chart', 'figure'),
    Input('uni-dropdown', 'value'),
    Input('price-slider', 'value'),
    Input('course-dropdown', 'value')
)
def update_dashboard(selected_unis, price_range, selected_courses):
    filtered_df = df.copy()
    if selected_unis and len(selected_unis) > 0:
        filtered_df = filtered_df[filtered_df['‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢'].isin(selected_unis)]

    filtered_df = filtered_df[
        (filtered_df['‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢'] >= price_range[0]) & 
        (filtered_df['‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢'] <= price_range[1])
    ]

    if filtered_df.empty:
        bar_fig = px.bar(title="‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
        box_fig = px.box(title="‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
        pie_fig = px.pie(title="‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
        return [], bar_fig, box_fig, pie_fig

    # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö bar chart
    if selected_courses and len(selected_courses) > 0:
        bar_df = filtered_df[filtered_df['‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£'].isin(selected_courses)]
    else:
        bar_df = filtered_df.copy()

    # Bar Chart
    bar_fig = px.bar(
        bar_df,
        x="‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£",
        y="‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢",
        color="‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢",
        labels={"‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢": "‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏° (‡∏ö‡∏≤‡∏ó/‡πÄ‡∏ó‡∏≠‡∏°)", "‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£": "‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£"},
        title="‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á",
    )
    bar_fig.update_layout(
        xaxis_tickangle=45,
        xaxis={'categoryorder': 'total descending'},
        height=500,
        margin=dict(t=50, b=150),
    )
    # bar_fig.update_xaxes(
    #     rangeslider_visible=True,
    #     tickmode='linear',
    #     tick0=0,
    #     dtick=1
    # )

    # Box Plot
    box_fig = px.box(
        filtered_df,
        x="‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢",
        y="‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢",
        points="all",
        labels={"‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢": "‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏° (‡∏ö‡∏≤‡∏ó/‡πÄ‡∏ó‡∏≠‡∏°)", "‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢": "‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢"},
        title="‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢"
    )

    # Pie Chart
    pie_data = filtered_df['‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢'].value_counts().reset_index()
    pie_data.columns = ['‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£']
    pie_fig = px.pie(
        pie_data,
        values='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£',
        names='‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢',
        title="‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢"
    )

    return filtered_df.to_dict('records'), bar_fig, box_fig, pie_fig

# Run app
if __name__ == '__main__':
    app.run(debug=True)
